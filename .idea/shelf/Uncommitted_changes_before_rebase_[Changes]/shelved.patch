Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision a411d7683d92609eded5450e45d32478213db80f)
+++ /dev/null	(revision a411d7683d92609eded5450e45d32478213db80f)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <targetSelectedWithDropDown>
-      <Target>
-        <type value="QUICK_BOOT_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="C:\Users\Samsung\.android\avd\Huawei_Y9_Pro_2019_API_34.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-10-13T07:39:40.012373Z" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	(revision a411d7683d92609eded5450e45d32478213db80f)
+++ /dev/null	(revision a411d7683d92609eded5450e45d32478213db80f)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/build/classes" />
-  </component>
-  <component name="ProjectType">
-    <option name="id" value="Android" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
--- a/.idea/vcs.xml	(revision a411d7683d92609eded5450e45d32478213db80f)
+++ /dev/null	(revision a411d7683d92609eded5450e45d32478213db80f)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision a411d7683d92609eded5450e45d32478213db80f)
+++ /dev/null	(revision a411d7683d92609eded5450e45d32478213db80f)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: .idea/compiler.xml
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
deleted file mode 100644
--- a/.idea/compiler.xml	(revision a411d7683d92609eded5450e45d32478213db80f)
+++ /dev/null	(revision a411d7683d92609eded5450e45d32478213db80f)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="11" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/gradle.xml
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
deleted file mode 100644
--- a/.idea/gradle.xml	(revision a411d7683d92609eded5450e45d32478213db80f)
+++ /dev/null	(revision a411d7683d92609eded5450e45d32478213db80f)
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="GradleMigrationSettings" migrationVersion="1" />
-  <component name="GradleSettings">
-    <option name="linkedExternalProjectsSettings">
-      <GradleProjectSettings>
-        <option name="testRunner" value="GRADLE" />
-        <option name="distributionType" value="DEFAULT_WRAPPED" />
-        <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="modules">
-          <set>
-            <option value="$PROJECT_DIR$" />
-            <option value="$PROJECT_DIR$/app" />
-          </set>
-        </option>
-      </GradleProjectSettings>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: app/src/main/java/com/techcndev/bookmeme/BackgroundSoundService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.techcndev.bookmeme;\r\n\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.media.MediaPlayer;\r\nimport android.os.IBinder;\r\nimport android.util.Log;\r\n\r\npublic class BackgroundSoundService extends Service {\r\n    private static final String TAG = \"BackgroundSoundService\"; // Corrected log tag\r\n    MediaPlayer player;\r\n    public String soundState;\r\n    SharedPreferences sharedPreferences;\r\n    SharedPreferences.Editor editor;\r\n\r\n    @Override\r\n    public IBinder onBind(Intent arg0) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        Log.d(TAG, \"Sound onCreate >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\r\n        sharedPreferences = getSharedPreferences(\"PREFS_DATA\", Context.MODE_PRIVATE);\r\n        editor = sharedPreferences.edit();\r\n        String musicName = sharedPreferences.getString(\"key_musicname\", null);\r\n        soundState = sharedPreferences.getString(\"key_soundstate1\", null);\r\n\r\n        if (musicName == null) {\r\n            editor.putString(\"key_musicname\", \"arcade_background_music\");\r\n            editor.commit();\r\n        }\r\n\r\n        musicName = sharedPreferences.getString(\"key_musicname\", null);\r\n        int resourceId = getResources().getIdentifier(musicName, \"raw\", getPackageName());\r\n\r\n        player = MediaPlayer.create(this, resourceId);\r\n        player.setLooping(true);\r\n        player.setVolume(1.0f, 1.0f);\r\n    }\r\n\r\n    @Override\r\n    public int onStartCommand(Intent intent, int flags, int startId) {\r\n        Log.d(TAG, \"Sound onStartCommand Outside >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\r\n        if (soundState == null || (soundState.equals(\"on\")) && (!player.isPlaying()))  {\r\n            editor.putString(\"key_soundstate1\", \"on\");\r\n            soundState = \"on\";\r\n            editor.commit();\r\n            player.start();\r\n            Log.d(TAG, \"Sound onStartCommand Inside >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\r\n        }\r\n        return START_STICKY;\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        Log.d(TAG, \"Sound onDestroy>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\r\n        player.stop();\r\n        player.release();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/techcndev/bookmeme/BackgroundSoundService.java b/app/src/main/java/com/techcndev/bookmeme/BackgroundSoundService.java
--- a/app/src/main/java/com/techcndev/bookmeme/BackgroundSoundService.java	(revision a411d7683d92609eded5450e45d32478213db80f)
+++ b/app/src/main/java/com/techcndev/bookmeme/BackgroundSoundService.java	(date 1698102388000)
@@ -9,7 +9,7 @@
 import android.util.Log;
 
 public class BackgroundSoundService extends Service {
-    private static final String TAG = "BackgroundSoundService"; // Corrected log tag
+    private static final String TAG = "BackgroundSoundService";
     MediaPlayer player;
     public String soundState;
     SharedPreferences sharedPreferences;
Index: app/src/main/java/com/techcndev/bookmeme/Level1Activity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.techcndev.bookmeme;\r\n\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Random;\r\n\r\npublic class Level1Activity extends AppCompatActivity {\r\n\r\n    private CountDownTimer countDownTimer;\r\n    private boolean isPaused = false;\r\n    private TextView textTimer;\r\n    private Button AttackButton;\r\n\r\n    public ArrayList<Button> PickerButton, DisplayButton;\r\n\r\n    // inGameLetters are the letters that is currently available and displayed\r\n    // selectedLetters are the letters that is selected by users\r\n    public ArrayList<ArrayList<Object>> inGameLetters, selectedLetters;\r\n\r\n    private int time = 30;\r\n    private final String LOG_TAG = \"Level1Activity\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_level1);\r\n        PickerButton = new ArrayList<>();\r\n        DisplayButton = new ArrayList<>();\r\n        inGameLetters = new ArrayList<>();\r\n        selectedLetters = new ArrayList<>();\r\n        init_components();\r\n        startPlay();\r\n    }\r\n    public void attack_now(View view) {\r\n        if (isPaused) {\r\n            startPlay();\r\n        } else {\r\n            if (countDownTimer != null) {\r\n                countDownTimer.cancel();\r\n            }\r\n        }\r\n        isPaused = !isPaused;\r\n    }\r\n\r\n    public void checkWord() {\r\n        if (isPaused) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void populate_displayBtn() {\r\n        int arrsize = DisplayButton.size();\r\n//        Button button;\r\n        String char_value;\r\n        for (int i = 1; arrsize >= i; i++) {\r\n            int buttonId = getResources().getIdentifier(\"display_letter\" + i, \"id\", getPackageName());\r\n            Button button = findViewById(buttonId);\r\n            try {\r\n                int letter_index = i - 1;\r\n                ArrayList<Object> letter_data = selectedLetters.get(letter_index);\r\n                char_value = (String) letter_data.get(1);\r\n            } catch (Exception e) {\r\n                char_value = \"\";\r\n            }\r\n            Log.d(LOG_TAG, \"populate_displayBtn>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\r\n            Log.d(LOG_TAG, \"char_value: \" + char_value);\r\n            Log.d(LOG_TAG, \"display_letter: \" + \"display_letter\" + i);\r\n            Log.d(LOG_TAG, \"buttonId: \" + buttonId);\r\n            button.setText(char_value);\r\n            if (char_value.equals(\"\")) {\r\n                button.setVisibility(View.GONE);\r\n            } else {\r\n                button.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void populate_pickerBtn() {\r\n        int arrsize = PickerButton.size();\r\n        if (arrsize > 0) {\r\n            for (int i = 1; arrsize >= i; i++) {\r\n                int buttonId = getResources().getIdentifier(\"picker_letter\" + i, \"id\", getPackageName());\r\n                Button button = findViewById(buttonId);\r\n                String char_value = null;\r\n                for (ArrayList<Object> array_item: inGameLetters) {\r\n                    if ((int) array_item.get(0) == buttonId) {\r\n                        try {\r\n                            // the id in arraylist is will be searched in all pickerButton items\r\n                            Log.d(LOG_TAG,\"array_item.get(1): \" + array_item.get(1));\r\n                            char_value = (String) array_item.get(1);\r\n                        } catch (Exception e) {\r\n                            Log.d(LOG_TAG, \"populate_pickerBtn Exception: \" + e + \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\r\n                            char_value = \"\";\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                button.setText(char_value);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void remove_pick_letter(View view) {\r\n        // know who invoke the method\r\n        // get the char value using buttonId invoker_value\r\n        ArrayList<Object> sendData = null;\r\n        int counter = 0;\r\n        for (Button button: DisplayButton) {\r\n            // get the id of one button in arraylist\r\n            int button_id = button.getId();\r\n            Log.d(LOG_TAG, \"button_id: \" + button_id + \" view.getId(): \" + view.getId());\r\n            if (button_id == view.getId()) {\r\n//                RemovePickInvokerValue = (CharSequence) invoker_data.get(1);\r\n                ArrayList<Object> invoker_data = selectedLetters.get(counter);\r\n                sendData = invoker_data;\r\n                break;\r\n            }\r\n            counter++;\r\n        }\r\n        Log.d(LOG_TAG, \"remove_pick_letter/CURRENT INGAMELETTERS SIZE \"+inGameLetters.size());\r\n        Log.d(LOG_TAG, \"remove_pick_letter/CURRENT INGAMELETTERS \"+ String.valueOf(inGameLetters));\r\n        // check in PickerButton which button is empty\r\n        for (Button ReceiverButton: PickerButton) {\r\n            CharSequence ReceiverText = ReceiverButton.getText();\r\n            Log.d(LOG_TAG, \"ReceiverText \" + ReceiverText +\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" );\r\n            // get the empty button id\r\n\r\n            Log.d(LOG_TAG, String.valueOf(TextUtils.isEmpty(ReceiverText)));\r\n\r\n            if (TextUtils.isEmpty(ReceiverText)) {\r\n                // add empty button id and invoker value arraylist to selectedLetters arraylist\r\n                inGameLetters.add(sendData);\r\n                Log.d(LOG_TAG, \"counter: \"+counter);\r\n                selectedLetters.remove(counter);\r\n//                Log.d(LOG_TAG, \"AFTER selectedLetters SIZE \"+selectedLetters.size());\r\n//                Log.d(LOG_TAG, \"UPDATED selectedLetters \"+String.valueOf(selectedLetters));\r\n//                Log.d(LOG_TAG, counter2 + \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" );\r\n                // set the empty button as visible\r\n                // set the method invoker as gone\r\n//                    CharSender.setVisibility(View.GONE);\r\n                // repopulate display buttons text value\r\n                populate_displayBtn();\r\n                populate_pickerBtn();\r\n                break;\r\n            }\r\n        }\r\n//        Log.d(LOG_TAG, counter2 + \" OUTSIDE>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" );\r\n    }\r\n\r\n    public void pick_letter(View view) {\r\n        // know who invoke the method\r\n        Button CharSender = (Button) view;\r\n        ArrayList<Object> sendData = null;\r\n        CharSequence invoker_value = null;\r\n        // get the char value using buttonIdinvoker_value\r\n        int counter = 0;\r\n        for (ArrayList<Object> invoker_data: inGameLetters) {\r\n            int invoker_id = (int) invoker_data.get(0);\r\n            if (invoker_id == view.getId()) {\r\n                invoker_value = (CharSequence) invoker_data.get(1);\r\n                sendData = invoker_data;\r\n                break;\r\n            }\r\n            counter++;\r\n        }\r\n            // check in DisplayButton which button is empty\r\n        for (Button ReceiverButton: DisplayButton) {\r\n            CharSequence ReceiverText = ReceiverButton.getText();\r\n            Log.d(LOG_TAG, ReceiverText + \" \" + counter +\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" );\r\n            // get the empty button id\r\n            if (!TextUtils.isEmpty(invoker_value)) {\r\n                if (TextUtils.isEmpty(ReceiverText)) {\r\n                    // add empty button id and invoker value arraylist to selectedLetters arraylist\r\n//                    int button_id = ReceiverButton.getId();\r\n//                    ArrayList<Object> add_selected = new ArrayList<>();\r\n//                    add_selected.add(button_id);\r\n//                    add_selected.add(invoker_value);\r\n                    selectedLetters.add(sendData);\r\n//                    Log.d(LOG_TAG, \"BEFORE INGAMELETTERS SIZE \" + inGameLetters.size());\r\n                    inGameLetters.remove(counter);\r\n//                    Log.d(LOG_TAG, \"AFTER INGAMELETTERS SIZE \" + inGameLetters.size());\r\n//                    Log.d(LOG_TAG, \"UPDATED INGAMELETTERS \" + String.valueOf(inGameLetters));\r\n//                    CharSender.setText(\"\");\r\n                    // repopulate display buttons text value\r\n                    populate_displayBtn();\r\n                    populate_pickerBtn();\r\n                    // set the empty button as visible\r\n//                    ReceiverButton.setVisibility(View.VISIBLE);\r\n                    // set the method invoker as invisible\r\n//                    CharSender.setVisibility(View.INVISIBLE);\r\n                    Log.d(LOG_TAG, \"UPDATED INGAMELETTERS \" + String.valueOf(inGameLetters));\r\n                    Log.d(LOG_TAG, \"AFTER INGAMELETTERS SIZE \" + inGameLetters.size());\r\n                    break;\r\n                }\r\n            } else {\r\n                Log.d(LOG_TAG, \"Letter selection denioed: button does not have text attribute value\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void startPlay() {\r\n        countDownTimer = new CountDownTimer(time * 1000, 1000) {\r\n            public void onTick(long millisUntilFinished) {\r\n                time = (int) (millisUntilFinished / 1000);\r\n                textTimer.setText(\"0:\" + checkDigit(time) + \" sec\");\r\n            }\r\n\r\n            public void onFinish() {\r\n                textTimer.setText(\"try again\");\r\n            }\r\n        }.start();\r\n\r\n        char[] RandomLetters = generateRandomLetters();\r\n        for (int i = 1; i <= 16 && i <= RandomLetters.length; i++) {\r\n            int buttonId = getResources().getIdentifier(\"picker_letter\" + i, \"id\", getPackageName());\r\n            Button button = findViewById(buttonId);\r\n            String RandText = String.valueOf(RandomLetters[i - 1]);\r\n            button.setText(RandText);\r\n\r\n            ArrayList<Object> charItemList = new ArrayList<>();\r\n            charItemList.add(buttonId);\r\n            charItemList.add(RandText);\r\n            inGameLetters.add(charItemList);\r\n        }\r\n    }\r\n\r\n    public String checkDigit(int number) {\r\n        return number <= 9 ? \"0\" + number : String.valueOf(number);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n//        moveTaskToBack(true);\r\n    }\r\n\r\n    public static char[] generateRandomLetters() {\r\n        Random random = new Random();\r\n        char[] randomLetters = new char[16];\r\n\r\n        for (int i = 0; i < 16; i++) {\r\n            randomLetters[i] = (char) (random.nextInt(26) + 'A');\r\n        }\r\n        return randomLetters;\r\n    }\r\n\r\n    private void init_components() {\r\n        Button AttackButton, PickerLetter1, PickerLetter2, PickerLetter3, PickerLetter4, PickerLetter5, PickerLetter6,\r\n                PickerLetter7, PickerLetter8, PickerLetter9, PickerLetter10, PickerLetter11, PickerLetter12, PickerLetter13, PickerLetter14,\r\n                PickerLetter15, PickerLetter16, DisplayLetter1, DisplayLetter2, DisplayLetter3, DisplayLetter4, DisplayLetter5, DisplayLetter6,\r\n                DisplayLetter7, DisplayLetter8, DisplayLetter9, DisplayLetter10, DisplayLetter11, DisplayLetter12;\r\n\r\n        textTimer = findViewById(R.id.attacktimesectext);\r\n        AttackButton = findViewById(R.id.attack_button);\r\n\r\n        PickerLetter1 = findViewById(R.id.picker_letter1);\r\n        PickerLetter2 = findViewById(R.id.picker_letter2);\r\n        PickerLetter3 = findViewById(R.id.picker_letter3);\r\n        PickerLetter4 = findViewById(R.id.picker_letter4);\r\n        PickerLetter5 = findViewById(R.id.picker_letter5);\r\n        PickerLetter6 = findViewById(R.id.picker_letter6);\r\n        PickerLetter7 = findViewById(R.id.picker_letter7);\r\n        PickerLetter8 = findViewById(R.id.picker_letter8);\r\n        PickerLetter9 = findViewById(R.id.picker_letter9);\r\n        PickerLetter10 = findViewById(R.id.picker_letter10);\r\n        PickerLetter11 = findViewById(R.id.picker_letter11);\r\n        PickerLetter12 = findViewById(R.id.picker_letter12);\r\n        PickerLetter13 = findViewById(R.id.picker_letter13);\r\n        PickerLetter14 = findViewById(R.id.picker_letter14);\r\n        PickerLetter15 = findViewById(R.id.picker_letter15);\r\n        PickerLetter16 = findViewById(R.id.picker_letter16);\r\n\r\n        DisplayLetter1 = findViewById(R.id.display_letter1);\r\n        DisplayLetter2 = findViewById(R.id.display_letter2);\r\n        DisplayLetter3 = findViewById(R.id.display_letter3);\r\n        DisplayLetter4 = findViewById(R.id.display_letter4);\r\n        DisplayLetter5 = findViewById(R.id.display_letter5);\r\n        DisplayLetter6 = findViewById(R.id.display_letter6);\r\n        DisplayLetter7 = findViewById(R.id.display_letter7);\r\n        DisplayLetter8 = findViewById(R.id.display_letter8);\r\n        DisplayLetter9 = findViewById(R.id.display_letter9);\r\n        DisplayLetter10 = findViewById(R.id.display_letter10);\r\n        DisplayLetter11 = findViewById(R.id.display_letter11);\r\n        DisplayLetter12 = findViewById(R.id.display_letter12);\r\n\r\n        PickerButton = new ArrayList<>(Arrays.asList(PickerLetter1, PickerLetter2, PickerLetter3, PickerLetter4, PickerLetter5,\r\n                PickerLetter6, PickerLetter7, PickerLetter8, PickerLetter9, PickerLetter10, PickerLetter11, PickerLetter12, PickerLetter13,\r\n                PickerLetter14, PickerLetter15, PickerLetter16));\r\n\r\n        DisplayButton = new ArrayList<>(Arrays.asList(DisplayLetter1, DisplayLetter2, DisplayLetter3, DisplayLetter4, DisplayLetter5, DisplayLetter6,\r\n                DisplayLetter7, DisplayLetter8, DisplayLetter9, DisplayLetter10, DisplayLetter11, DisplayLetter12));\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/techcndev/bookmeme/Level1Activity.java b/app/src/main/java/com/techcndev/bookmeme/Level1Activity.java
--- a/app/src/main/java/com/techcndev/bookmeme/Level1Activity.java	(revision a411d7683d92609eded5450e45d32478213db80f)
+++ b/app/src/main/java/com/techcndev/bookmeme/Level1Activity.java	(date 1698098044000)
@@ -181,16 +181,11 @@
             if (!TextUtils.isEmpty(invoker_value)) {
                 if (TextUtils.isEmpty(ReceiverText)) {
                     // add empty button id and invoker value arraylist to selectedLetters arraylist
-//                    int button_id = ReceiverButton.getId();
-//                    ArrayList<Object> add_selected = new ArrayList<>();
-//                    add_selected.add(button_id);
-//                    add_selected.add(invoker_value);
                     selectedLetters.add(sendData);
-//                    Log.d(LOG_TAG, "BEFORE INGAMELETTERS SIZE " + inGameLetters.size());
+//                    Log.d(LOG_TAG, "BEFORE INGAMELETTERS SIZE " + selectedLetters.size());
                     inGameLetters.remove(counter);
-//                    Log.d(LOG_TAG, "AFTER INGAMELETTERS SIZE " + inGameLetters.size());
-//                    Log.d(LOG_TAG, "UPDATED INGAMELETTERS " + String.valueOf(inGameLetters));
-//                    CharSender.setText("");
+//                    Log.d(LOG_TAG, "AFTER INGAMELETTERS SIZE " + selectedLetters.size());
+//                    Log.d(LOG_TAG, "UPDATED INGAMELETTERS " + String.valueOf(selectedLetters));
                     // repopulate display buttons text value
                     populate_displayBtn();
                     populate_pickerBtn();
@@ -198,8 +193,8 @@
 //                    ReceiverButton.setVisibility(View.VISIBLE);
                     // set the method invoker as invisible
 //                    CharSender.setVisibility(View.INVISIBLE);
-                    Log.d(LOG_TAG, "UPDATED INGAMELETTERS " + String.valueOf(inGameLetters));
-                    Log.d(LOG_TAG, "AFTER INGAMELETTERS SIZE " + inGameLetters.size());
+                    Log.d(LOG_TAG, "UPDATED selectedLetters " + String.valueOf(selectedLetters));
+                    Log.d(LOG_TAG, "AFTER selectedLetters SIZE " + selectedLetters.size());
                     break;
                 }
             } else {
Index: app/src/main/java/com/techcndev/bookmeme/WordsDBHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/techcndev/bookmeme/WordsDBHelper.java b/app/src/main/java/com/techcndev/bookmeme/WordsDBHelper.java
new file mode 100644
--- /dev/null	(date 1698108676000)
+++ b/app/src/main/java/com/techcndev/bookmeme/WordsDBHelper.java	(date 1698108676000)
@@ -0,0 +1,91 @@
+package com.techcndev.bookmeme;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import android.content.Context;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+public class WordsDBHelper extends SQLiteOpenHelper {
+
+    private static String TAG = "DataBaseHelper"; // Tag just for the LogCat window
+    private static String DB_NAME ="YourDbName"; // Database name
+    private static int DB_VERSION = 1; // Database version
+    private final File DB_FILE;
+    private SQLiteDatabase mDataBase;
+    private final Context mContext;
+
+    public WordsDBHelper(Context context) {
+        super(context, DB_NAME, null, DB_VERSION);
+        DB_FILE = context.getDatabasePath(DB_NAME);
+        this.mContext = context;
+    }
+
+    public void createDataBase() throws IOException {
+        // If the database does not exist, copy it from the assets.
+        boolean mDataBaseExist = checkDataBase();
+        if(!mDataBaseExist) {
+            this.getReadableDatabase();
+            this.close();
+            try {
+                // Copy the database from assests
+                copyDataBase();
+                Log.e(TAG, "createDatabase database created");
+            } catch (IOException mIOException) {
+                throw new Error("ErrorCopyingDataBase");
+            }
+        }
+    }
+
+    // Check that the database file exists in databases folder
+    private boolean checkDataBase() {
+        return DB_FILE.exists();
+    }
+
+    // Copy the database from assets
+    private void copyDataBase() throws IOException {
+        InputStream mInput = mContext.getAssets().open(DB_NAME);
+        OutputStream mOutput = new FileOutputStream(DB_FILE);
+        byte[] mBuffer = new byte[1024];
+        int mLength;
+        while ((mLength = mInput.read(mBuffer)) > 0) {
+            mOutput.write(mBuffer, 0, mLength);
+        }
+        mOutput.flush();
+        mOutput.close();
+        mInput.close();
+    }
+
+    // Open the database, so we can query it
+    public boolean openDataBase() throws SQLException {
+        // Log.v("DB_PATH", DB_FILE.getAbsolutePath());
+        mDataBase = SQLiteDatabase.openDatabase(String.valueOf(DB_FILE), null, SQLiteDatabase.CREATE_IF_NECESSARY);
+        // mDataBase = SQLiteDatabase.openDatabase(DB_FILE, null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
+        return mDataBase != null;
+    }
+
+    @Override
+    public synchronized void close() {
+        if(mDataBase != null) {
+            mDataBase.close();
+        }
+        super.close();
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/techcndev/bookmeme/WordsDBAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/techcndev/bookmeme/WordsDBAdapter.java b/app/src/main/java/com/techcndev/bookmeme/WordsDBAdapter.java
new file mode 100644
--- /dev/null	(date 1698108116000)
+++ b/app/src/main/java/com/techcndev/bookmeme/WordsDBAdapter.java	(date 1698108116000)
@@ -0,0 +1,62 @@
+package com.techcndev.bookmeme;
+
+import java.io.IOException;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+public class WordsDBAdapter {
+
+    protected static final String TAG = "DataAdapter";
+
+    private final Context mContext;
+    private SQLiteDatabase mDb;
+    private WordsDBHelper mDbHelper;
+
+    public WordsDBAdapter(Context context) {
+        this.mContext = context;
+        mDbHelper = new WordsDBHelper(mContext);
+    }
+
+    public WordsDBAdapter createDatabase() throws SQLException {
+        try {
+            mDbHelper.createDataBase();
+        } catch (IOException mIOException) {
+            Log.e(TAG, mIOException.toString() + "  UnableToCreateDatabase");
+            throw new Error("UnableToCreateDatabase");
+        }
+        return this;
+    }
+
+    public WordsDBAdapter open() throws SQLException {
+        try {
+            mDbHelper.openDataBase();
+            mDbHelper.close();
+            mDb = mDbHelper.getReadableDatabase();
+        } catch (SQLException mSQLException) {
+            Log.e(TAG, "open >>"+ mSQLException.toString());
+            throw mSQLException;
+        }
+        return this;
+    }
+
+    public void close() {
+        mDbHelper.close();
+    }
+
+    public Cursor getTestData() {
+        try {
+            String sql ="SELECT * FROM myTable";
+            Cursor mCur = mDb.rawQuery(sql, null);
+            if (mCur != null) {
+                mCur.moveToNext();
+            }
+            return mCur;
+        } catch (SQLException mSQLException) {
+            Log.e(TAG, "getTestData >>"+ mSQLException.toString());
+            throw mSQLException;
+        }
+    }
+}
\ No newline at end of file
